@use "sass:map";
@use "sass:math";

@function val($map, $keys...) {
  @if nth($keys, 1) == null {
    $keys: remove-nth($keys, 1);
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

@function palette($color...) {
  @return val($palette, $color...);
}

@function nav($vars...) {
  @return val($nav, $vars...);
}

@mixin accent_colour() {
  color: palette(accent, fg);
  background-color: palette(accent, bg);

  a {
    color: palette(accent, fg);
  }
}

@mixin in-size($sizes) {
  @each $size in $sizes {
    @if ($size == "xxs") {
      @media (max-width: ($screen-xs - 1)) {
        @content;
      }
    }
    @if ($size == "xs") {
      @media (min-width: $screen-xs) and (max-width: ($screen-sm - 1)) {
        @content;
      }
    }
    @if ($size == "sm") {
      @media (min-width: $screen-sm) and (max-width: ($screen-md - 1)) {
        @content;
      }
    }
    @if ($size == "md") {
      @media (min-width: $screen-md) and (max-width: ($screen-lg - 1)) {
        @content;
      }
    }
    @if ($size == "lg") {
      @media (min-width: $screen-lg) {
        @content;
      }
    }
  }
}

$base-size: 1.25rem;

@function fluid($min-size, $max-size, $min-breakpoint: 20rem, $max-breakpoint: 60rem, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: $slope * 100;
  $intercept-rem: $min-size - $slope * $min-breakpoint;
  $min-size-rem: $min-size;
  $max-size-rem: $max-size;

  @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

@mixin fluid-type($min-size, $max-size) {
  font-size: $min-size;
  font-size: fluid($min-size, $max-size);
}

@mixin fluid-auto($size) {
  @include fluid-type($size - (($size - $base-size) * 0.556), $size);
}
